{"version":3,"sources":["components/PictureCard/PictureCard.js","components/Nav/Nav.js","components/Wrapper/Wrapper.js","components/Title/Title.js","Container.js","Row.js","Column.js","App.js","serviceWorker.js","index.js"],"names":["PictureCard","props","react_default","a","createElement","className","value","id","onClick","handleClick","alt","name","src","image","Nav","href","title","message","score","topScore","Wrapper","children","Title","Container","concat","fluid","Row","Column","size","split","map","join","App","state","pictures","clickedPic","_this","indexOf","handleIncrement","setState","handleReset","newScore","handleRandom","randomPic","elements","i","length","j","Math","floor","random","_ref","randomPicture","_this2","this","components_Wrapper_Wrapper","components_Nav_Nav","components_Title_Title","src_Container","src_Row","picture","src_Column","components_PictureCard_PictureCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e90e6b82.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./PictureCard.css\";\n\nconst PictureCard = props => (\n    <div\n    className = \"card\"\n    value = {props.id}\n    onClick={() => props.handleClick(props.id)}\n    >\n        <div className=\"img-container\">\n            <img alt={props.name} src={props.image} />\n        </div>\n    </div>\n);\n\nexport default PictureCard;","import React from \"react\";\nimport \"./Nav.css\";\n\nconst Nav = props => (\n    <nav>\n        <ul>\n            <li className=\"brand animated lightSpeedIn\">\n                <a href=\"/clicky-game/\"> {props.title} </a>\n            </li>\n            <li id=\"msg\">\n                {props.message}\n            </li>\n            <li id=\"currentScore\">\n                Current Score: {props.score}\n            </li>\n            <li id=\"highScore\">\n                Top Score: {props.topScore}\n            </li>\n        </ul>\n    </nav>\n);\n\nexport default Nav;","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\nimport \"./Title.css\";\n\nconst Title = props => <h1 className=\"title\">{props.children}</h1>\n\nexport default Title;","import React from \"react\";\n\nconst Container = props => <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}> {props.children} </div>;\n\nexport default Container;","import React from \"react\";\n\nconst Row = props => <div className={`row${props.fluid ? \"-fluid\" : \"\"}`}> {props.children} </div>\n\nexport default Row;","import React from \"react\";\n\nconst Column = props => {\n    const size = props.size.split(\"\").map(size => \"col-\" + size).join(\"\");\n    return (\n        <div className = {size}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Column;","import React, { Component } from \"react\";\nimport PictureCard from \"./components/PictureCard\"\nimport Nav from \"./components/Nav\"\nimport Wrapper from \"./components/Wrapper\"\nimport Title from \"./components/Title\"\nimport pictures from \"./pictures.json\"\nimport './App.css';\nimport Container from \"./Container\"\nimport Row from \"./Row\"\nimport Column from \"./Column\"\n\nfunction randomPicture(elements) {\n  for (let i = elements.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [elements[i], elements[j]] = [elements[j], elements[i]];\n  }\n  return elements;\n};\n\nclass App extends Component {\n  state = {\n    pictures,\n    score: 0,\n    topScore: 0,\n    clickedPic: [],\n    message: \"Click an image to begin\"\n  }\n\n  handleClick = id => {\n    if (this.state.clickedPic.indexOf(id) === -1) {\n      this.handleIncrement();\n      this.setState({ clickedPic: this.state.clickedPic.concat(id) });\n    } else {\n      this.handleReset();\n    }\n  }\n  \n  handleIncrement = () => {\n    const newScore = this.state.score + 1;\n    this.setState({\n      score: newScore,\n      message: \"You guessed correctly, you got a point.\"\n    });\n    if (newScore >= this.state.topScore) {\n      this.setState({\n        topScore: newScore,\n        message: \"You guessed correctly, you got a high score.\"\n      })\n    }\n    this.handleRandom();\n  }\n  \n  handleReset = () => {\n    this.setState({\n      score: 0,\n      topScore: this.state.topScore,\n      message: \"You guessed wrong, try again!\",\n      clickedPic : []\n    });\n    this.handleRandom();\n  }\n  \n  handleRandom = () => {\n    let randomPic = randomPicture(pictures);\n    this.setState({ pictures: randomPic})\n  }\n  \n  render() {\n    return (\n      <Wrapper>\n        <Nav\n          title = \"Clicky Game\"\n          score = {this.state.score}\n          topScore = {this.state.topScore}\n          message = {this.state.message}\n        />\n  \n        <Title>\n          Click on an image to earn points, but do not click on any more than once!\n        </Title>\n        <Container>\n          <Row>\n            {this.state.pictures.map(picture => (\n              <Column size = \"md-3 sm-6\">\n                <PictureCard\n                  key = {picture.id}\n                  handleClick = {this.handleClick}\n                  handleIncrement = {this.handleIncrement}\n                  handleReset = {this.handleReset}\n                  handleRandom = {this.handleRandom}\n                  id = {picture.id}\n                  image = {picture.image}\n                />\n              </Column>\n            ))}\n          </Row>\n        </Container>\n      </Wrapper>\n    )\n  }\n}\n\n\n\n// clickedPictures = prop => {\n//   if(this.state.clickedPic.includes(props.id) === false) {\n//     this.state.clickedPic.push(prop.id);\n//     this.setState({\n//       score: this.state.score + 1,\n//     });\n//     if(this.state.score >= this.state.topScore) {\n//       this.state((prevState) => ({\n//         topScore: prevState.score,\n//         message: \"You guessed correctly, you got a point.\"\n//       }));\n//     }\n//   }\n//   else {\n//     this.setState({\n//       score: 0,\n//       clickedPic: [],\n//       message: \"You guessed wrong, try again.\"\n//     })\n//   }\n// }\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}